{"version":3,"sources":["asset/Rolling.gif","components/Title/index.js","components/Subtitle/index.js","components/DetailText/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Wrapper","Styled","h2","_templateObject","Title","react_default","a","createElement","h3","Subtitle_templateObject","Subtitle","Subtitle_Wrapper","div","DetailText_templateObject","DetailText","DetailText_Wrapper","StackedAreaChart","React","lazy","Promise","all","e","then","bind","BarChart","Container","App_templateObject","SubContent","_templateObject2","Loading","_ref","width","height","style","display","justifyContent","alignItems","src","Rolling","alt","App","components_Title","react","fallback","App_Loading","components_Subtitle","components_DetailText","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yVCGxC,IAAMC,EAAUC,IAAOC,GAAVC,KAeEC,EAVD,kBACZC,EAAAC,EAAAC,cAACP,EAAD,KACEK,EAAAC,EAAAC,cAAA,uCAC2BF,EAAAC,EAAAC,cAAA,WAD3B,yCAEwCF,EAAAC,EAAAC,cAAA,WAFxC,+GCPJ,IAAMP,EAAUC,IAAOO,GAAVC,KAWEC,EAPE,kBACfL,EAAAC,EAAAC,cAACI,EAAD,2DACqDN,EAAAC,EAAAC,cAAA,WADrD,wRCLF,IAAMP,EAAUC,IAAOW,IAAVC,KA2BEC,EAXI,kBACjBT,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,iCAAT,QAAyCF,EAAAC,EAAAC,cAAA,+BAAzC,wCACAF,EAAAC,EAAAC,cAAA,oHAA2GF,EAAAC,EAAAC,cAAA,uCAA3G,mEACAF,EAAAC,EAAAC,cAAA,4CAAmCF,EAAAC,EAAAC,cAAA,uCAAnC,iFACAF,EAAAC,EAAAC,cAAA,kFAAyEF,EAAAC,EAAAC,cAAA,iCAAzE,0CAA2IF,EAAAC,EAAAC,cAAA,uQCnBjJ,IAAMS,EAAmBC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAtB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,KAAAC,KAAAxB,EAAAyB,KAAA,aACpCC,EAAWP,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAtB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,KAAAC,KAAAxB,EAAAyB,KAAA,aAE5BE,EAAYxB,IAAOW,IAAVc,KAITC,EAAa1B,IAAOW,IAAVgB,KAKVC,EAAU,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAOC,EAATF,EAASE,OAAT,OACd3B,EAAAC,EAAAC,cAAA,OAAK0B,MAAO,CAACF,QAAOC,SAAQE,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WACjF/B,EAAAC,EAAAC,cAAA,OAAK8B,IAAKC,IAASC,IAAI,aAAaN,MAAO,CAACF,MAAO,OAAQC,OAAQ,YA0BxDQ,mLApBX,OACEnC,EAAAC,EAAAC,cAACkB,EAAD,KACEpB,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAA,SAAD,CAAUC,SAAUtC,EAAAC,EAAAC,cAACqC,EAAD,CAASb,MAAO,KAAMC,OAAQ,OAChD3B,EAAAC,EAAAC,cAACS,EAAD,OAEFX,EAAAC,EAAAC,cAACoB,EAAD,KACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACmC,EAAA,SAAD,CAAUC,SAAUtC,EAAAC,EAAAC,cAACqC,EAAD,CAASb,MAAO,IAAKC,OAAQ,OAC/C3B,EAAAC,EAAAC,cAACiB,EAAD,QAGJnB,EAAAC,EAAAC,cAACuC,EAAD,eAfQ7B,IAAM8B,eCZJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.b9a18525.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rolling.9a6a6167.gif\";","import React from 'react';\nimport Styled from 'styled-components';\n\nconst Wrapper = Styled.h2`\n  text-align: center;\n  min-width: 1280px;\n`;\n\nconst Title = () => (\n  <Wrapper>\n    <div>\n      TREN AREA KEILMUAN UTAMA <br />\n      TUGAS AKHIR MAHASISWA INFORMATIKA ITB <br />\n      1998 - 2018\n    </div>\n  </Wrapper>\n)\n\nexport default Title;\n","import React from 'react';\nimport Styled from 'styled-components';\n\nconst Wrapper = Styled.h3`\n  text-align: center;\n`;\n\nconst Subtitle = () => (\n  <Wrapper>\n    Perbandingan Jumlah Area Keilmuan Utama Tugas Akhir<br/>\n    Tahun 1998-2018\n  </Wrapper>\n);\n\nexport default Subtitle;\n","import React from 'react';\nimport Styled from 'styled-components';\n\nconst Wrapper = Styled.div`\n  font-weight: 600;\n  margin-right: 30px;\n  display: flex;\n  align-items: center;\n  min-width: 461px;\n\n  ul {\n    text-align: justify;\n  }\n\n  li {\n    margin-bottom: 20px;\n  }\n`;\n\nconst DetailText = () => (\n  <Wrapper>\n    <ul>\n      <li>Tren <i>Software Engineering</i> dan <i>Intelligent System</i> cenderung meningkat setiap tahunnya</li>\n      <li>Area keilmuan yang trennya relatif naik secara signifikan dalam tiga tahun terakhir (2016-2018) adalah <i>Platform-Based Development</i>, yaitu sejumlah 5 TA pada 2016 dan naik hingga 15 TA pada 2018</li>\n      <li>Sejak 2008, tren area keilmuan <i>Human Computer Interaction</i> mulai naik dari yang sebelumnya tidak ada pada tahun 1998-1999 dan 2001-2007</li>\n      <li>Pada 20 tahun terakhir, jumlah area keilmuan yang mendominasi adalah <i>Software Engineering</i>, sedangkan yang paling sedikit adalah <i>Human Computer Interaction</i></li>\n    </ul>\n  </Wrapper>\n);\n\nexport default DetailText;\n","import React, {Suspense} from 'react';\nimport Title from 'components/Title';\nimport Subtitle from 'components/Subtitle';\nimport DetailText from 'components/DetailText';\nimport Styled from 'styled-components';\nimport Rolling from 'asset/Rolling.gif'\nconst StackedAreaChart = React.lazy(() => import('components/StackedAreaChart'));\nconst BarChart = React.lazy(() => import('components/BarChart'));\n\nconst Container = Styled.div`\n  margin: 30px 10px;\n`;\n\nconst SubContent = Styled.div`\n  margin-top: 32px;\n  display: flex;\n`;\n\nconst Loading = ({width, height}) => (\n  <div style={{width, height, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n    <img src={Rolling} alt=\"Loading...\" style={{width: '40px', height: '40px'}}/>\n  </div>\n);\n\nclass App extends React.PureComponent {\n  render() {\n    return (\n      <Container>\n        <Title />\n        <Suspense fallback={<Loading width={1280} height={480} />}>\n          <StackedAreaChart />\n        </Suspense>\n        <SubContent>\n          <div>\n            <Subtitle />\n            <Suspense fallback={<Loading width={800} height={420} />}>\n              <BarChart />\n            </Suspense>\n          </div>\n          <DetailText />\n        </SubContent>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}